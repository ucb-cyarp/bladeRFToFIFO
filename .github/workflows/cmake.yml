#Based on vitis/Laminar Test

name: CMake CI

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  LIBBLADERFCOMMIT: 43a559dd5ed77df94bef9e28c1f45126c4d051a5

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-18.04
    
    #Try with both GCC and clang
    #See https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
    strategy:
      fail-fast: false #See https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
      matrix:
        compiler: [clang, gcc] 

    steps:
    - uses: actions/checkout@v2
      
    - name: Install Dependencies
      shell: bash
      run: if [[ ${{ matrix.compiler }} == "clang" ]]; then sudo apt install clang; elif [[ ${{ matrix.compiler }} == "gcc" ]]; then sudo apt install gcc g++; fi; sudo apt install build-essential cmake libusb-1.0-0-dev libusb-1.0-0 libncurses5-dev libtecla1 libtecla-dev pkg-config git wget doxygen help2man pandoc

    - name: Install libBladeRF
      shell: bash
      run: cd /tmp && git clone https://github.com/Nuand/bladeRF.git ./bladeRF && cd bladeRF && git checkout $LIBBLADERFCOMMIT && cd host && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -DINSTALL_UDEV_RULES=OFF ../ && make && make install && cd /tmp && rm -rf bladeRF

    - name: Set Compiler
      shell: bash
      # Using method in https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
      # to conditionally set the output variable based on the matrix compiler value
      run: if [[ ${{ matrix.compiler }} == "clang" ]]; then echo "CC=clang" >> $GITHUB_ENV; echo "CXX=clang++" >> $GITHUB_ENV; elif [[ ${{ matrix.compiler }} == "gcc" ]]; then echo "CC=gcc" >> $GITHUB_ENV; echo "CXX=g++" >> $GITHUB_ENV; fi 

    - name: Report Compiler Versions
      shell: bash
      run: echo ${CXX}; echo ${CC}; ${CXX} --version; ${CC} --version

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
